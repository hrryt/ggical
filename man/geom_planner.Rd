% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_planner.R, R/stat_planner.R
\name{geom_planner}
\alias{geom_planner}
\alias{stat_planner}
\title{Day Planner}
\usage{
geom_planner(
  mapping = NULL,
  data = NULL,
  stat = "planner",
  position = "identity",
  ...,
  fatten = 2.5,
  na.rm = FALSE,
  orientation = NA,
  show.legend = NA,
  inherit.aes = TRUE
)

stat_planner(
  mapping = NULL,
  data = NULL,
  geom = "planner",
  position = "identity",
  ...,
  na.rm = FALSE,
  orientation = NA,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{position}{Position adjustment, either as a string naming the adjustment
(e.g. \code{"jitter"} to use \code{position_jitter}), or the result of a call to a
position adjustment function. Use the latter if you need to change the
settings of the adjustment.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{orientation}{The orientation of the layer. The default (\code{NA})
automatically determines the orientation from the aesthetic mapping. In the
rare event that this fails it can be given explicitly by setting \code{orientation}
to either \code{"x"} or \code{"y"}. See the \emph{Orientation} section for more detail.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{geom, stat}{Override the default connection between \code{geom_bar()} and
\code{stat_count()}.}
}
\description{
A 'ggplot2' geom and stat designed for easy visualization of
iCalendar data from \link[calendar:calendar]{calendar}.
}
\section{Aesthetics}{

\code{geom_planner()} understands the following aesthetics
(required aesthetics are in bold):
\itemize{
\item \strong{\code{x} \emph{or} \code{y}}
\item \strong{\code{ymin} \emph{or} \code{ymax}}
\item \strong{\code{ymax} \emph{or} \code{xmax}}
\item \code{alpha}
\item \code{colour}
\item \code{group}
\item \code{linetype}
\item \code{linewidth}
}

Learn more about setting these aesthetics in \code{vignette("ggplot2-specs")}.

\code{stat_count()} understands the following aesthetics
(required aesthetics are in bold):
\itemize{
\item \strong{\code{x} \emph{or} \code{y}}
\item \strong{\code{ystart} \emph{or} \code{xstart}}
\item \code{yend}
\item \code{xend}
}

\verb{*start} and \verb{*end} aesthetics are coerced to \code{POSIXlt}.
}

\section{Computed variables}{

These are calculated by the 'stat' part of layers and can be accessed with
\link[ggplot2:aes_eval]{delayed evaluation}.
\itemize{
\item \code{after_stat(time)}\cr
time in hours after midnight of the start of each event
\item \code{after_stat(timemax)}\cr
time in hours after midnight of the end of each event
}
}

\section{Orientation}{


This geom treats each axis differently and, thus, can thus have two orientations. Often the orientation is easy to deduce from a combination of the given mappings and the types of positional scales in use. Thus, ggplot2 will by default try to guess which orientation the layer should have. Under rare circumstances, the orientation is ambiguous and guessing may fail. In that case the orientation can be specified directly using the \code{orientation} parameter, which can be either \code{"x"} or \code{"y"}. The value gives the axis that the geom should run along, \code{"x"} being the default orientation you would expect for the geom.

}

\examples{
library(ggplot2)

calendar <- timetable
calendar$date <- as.Date(calendar$DTSTART)
today <- as.Date("2024-11-24")                # Sys.Date()
now <- as.POSIXct("2024-11-24 20:20:00 GMT")  # Sys.time()

ggplot(calendar) +
  geom_planner(aes(date, ystart = DTSTART, ystop = DTEND, fill = SUMMARY)) +
  geom_planner(aes(today, ystart = now), col = "red", linewidth = 0.1) +
  scale_x_date(
    date_breaks = "1 day", labels = ~weekdays(.x, abbreviate = TRUE),
    limits = today + c(-0.5, 6.5)) +
  scale_y_time_reverse(
    breaks = hms::hms(hours = 21:9), labels = ~format(as.POSIXlt(.x), format = "\%H:\%M"),
    limits = hms::hms(hours = c(21, 9))) +
  theme_planner()

ggplot(calendar) +
  geom_planner(aes(y = date, xstart = DTSTART, xstop = DTEND, fill = SUMMARY)) +
  geom_planner(aes(y = today, xstart = now), col = "red", linewidth = 0.1) +
  scale_x_time(
    breaks = hms::hms(hours = 9:21), labels = ~format(as.POSIXlt(.x), format = "\%H:\%M"),
    limits = hms::hms(hours = c(9, 21)), guide = guide_axis(angle = 45)) +
  scale_y_date_reverse(
    date_breaks = "-1 day", labels = weekdays,
    limits = today + c(6.5, -0.5)) +
  theme_planner("y")

}
